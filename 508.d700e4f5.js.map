{"version":3,"file":"508.d700e4f5.js","mappings":"+HAQA,MAAMA,EAAa,sFAMbC,EAAS,wBACTC,EAAS,gEAEA,WAASC,GACtB,MAAO,CACL,KAAQ,OACR,QAAW,CAAC,QACZ,kBAAoB,EAEpB,SAAY,CACV,QAAW,CACT,KAAM,QAAS,OAAQ,SAAU,eACjC,QAAS,KAAM,QAAS,SACxB,SAAU,SAAU,YACpB,SAAU,MAAO,SAAU,gBAC3B,QAAS,UAEX,QAAW,CAAC,OAAQ,SACpB,KAAQ,CAAC,MAAO,MAAO,QAAS,QAAS,OAAQ,UAAW,OAAQ,KACpE,SAAY,IAGd,SAAY,CAEV,CAAE,MAAS,UAAW,MAAS,KAAM,IAAO,UAC5C,CACE,MAAS,UACT,MAAS,KACT,IAAO,KACP,SAAY,CAAC,SAIf,CACE,MAAS,OACT,MAAS,UACT,IAAO,IACP,SAAY,CACV,CAAE,MAAS,UAAW,MAAS,uBAC/B,CACE,MAAS,WACT,MAASA,EAAKC,MAAMC,OAAO,KAAM,KAAM,IAAK,IAAK,IAAK,OAExD,CACE,MAAS,SACT,MAAS,kCAIf,CACE,MAAS,UACT,MAAS,WACT,IAAO,IACP,SAAY,CACV,CAAE,MAAS,SAAU,MAASJ,KAKlC,CAAE,MAAS,SAAU,MAASC,GAC9B,CAAE,MAAS,SAAU,MAASD,GAG9B,CACE,MAAS,CACP,qBACA,MACA,MACA,MACAD,GAEF,MAAS,CACP,EAAG,UACH,EAAG,sBAGP,CAAE,MAAS,WAAY,MAAS,IAAIM,OAAON,EAAa,YAGxD,CACE,MAAS,WACT,MAASG,EAAKC,MAAMC,OAClB,MAAO,KAAM,KAAM,KAAM,KAAM,OAAQ,MACvC,KAAM,KAAM,MAAO,MAAO,KAAM,OAAQ,MAAO,MAC/C,KAAM,MAAO,MAAO,OAAQ,QAAS,KAAM,OAAQ,MACnD,MAAO,OAAQ,QAAS,KAAM,MAAO,MACrC,KAAM,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,KAAK,IAC3C,IAAK,IAAK,KAAM,IAAK,OAGzB,CAAE,MAAS,cAAe,MAAS,wBAGzC,C","sources":["webpack://tonscan/./node_modules/highlightjs-func/src/languages/func.js"],"sourcesContent":["/*\nLanguage: FunC\nAuthor: Nikita Sobolev <mail@sobolevn.me>\nDescription: FunC is a smart-contract programming language that feels like C\nWebsite: https://ton.org/docs\nCategory: smartcontracts\n*/\n\nconst IDENTIFIER = '(?!\")(`([^`]+)`|' +\n  '((?=_)_|' +\n  '(?=\\\\{)\\\\{|' +\n  '(?=\\\\})\\\\}|' +\n  '(?![_`{}]))([^;,\\\\[\\\\]\\\\(\\\\)\\\\s~.]+))'\n\nconst STRING = /\\\"[^\\n\\\"]+\\\"[Hhcusa]?/\nconst NUMBER = /(-?(?!_)([\\d_]+|0x[\\d_a-fA-F]+)|0b[1_0]+)(?<!_)(?=[\\s\\)\\],;])/\n\nexport default function(hljs) {\n  return {\n    'name': 'FunC',\n    'aliases': ['func'],\n    'case_insensitive': false,\n\n    'keywords': {\n      'keyword': [\n        'if', 'ifnot', 'else', 'elseif', 'elseifnot|10',\n        'while', 'do', 'until', 'repeat',\n        'return', 'impure', 'method_id',\n        'forall', 'asm', 'inline', 'inline_ref|10',\n        'const', 'global',\n      ],\n      'literal': ['true', 'false'],\n      'type': ['var', 'int', 'slice', 'tuple', 'cell', 'builder', 'cont', '_'],\n      'built_in': [],\n    },\n\n    'contains': [\n      // Comments\n      { 'scope': 'comment', 'begin': ';;', 'end': /(?=\\n)/ },\n      {\n        'scope': 'comment',\n        'begin': '{-',\n        'end': '-}',\n        'contains': ['self'],\n      },\n\n      // Directives\n      {\n        'scope': 'meta',\n        'begin': /#pragma/,\n        'end': /;/,\n        'contains': [\n          { 'scope': 'keyword', 'match': /version|not-version/ },\n          {\n            'scope': 'operator',\n            'match': hljs.regex.either(/>=/, /<=/, /=/, />/, /</, /\\^/),\n          },\n          {\n            'scope': 'number',\n            'match': /([0-9]+)(.[0-9]+)?(.[0-9]+)?/\n          },\n        ],\n      },\n      {\n        'scope': 'keyword',\n        'begin': /#include/,\n        'end': /;/,\n        'contains': [\n          { 'scope': 'string', 'match': STRING },\n        ],\n      },\n\n      // Primitives\n      { 'scope': 'number', 'match': NUMBER },\n      { 'scope': 'string', 'match': STRING },\n\n      // Constans / Variables / Functions\n      {\n        'match': [\n          /\\b(const|global)\\b/,\n          /\\s+/,\n          /\\w+/,  // in real world this is just a type, but we allow any text\n          /\\s+/,\n          IDENTIFIER,\n        ],\n        'scope': {\n          1: 'keyword',\n          5: 'variable.constant',\n        },\n      },\n      { 'scope': 'function', 'match': new RegExp(IDENTIFIER + '(?=[\\(])') },\n\n      // Punctuation\n      {\n        'scope': 'operator',\n        'match': hljs.regex.either(\n          /<=>/, />=/, /<=/, /!=/, /==/, /\\^>>/, /~>>/,\n          />>/, /<</, /\\/%/, /\\^%/, /~%/, /\\^\\//, /~\\//, /\\+=/,\n          /-=/, /\\*=/, /\\/=/, /~\\/=/, /\\^\\/=/, /%=/, /\\^%=/, /<<=/,\n          />>=/, /~>>=/, /\\^>>=/, /&=/, /\\^=/, /\\|=/,\n          /\\^/, /=/, /~/, /\\//, /%/, /-/, /\\*/, /\\+/,/>/,\n          /</, /&/, /\\|/, /:/, /\\?/,\n        ),\n      },\n      { 'scope': 'punctuation', 'match': /[\\.;\\(\\),\\[\\]~\\{\\}]/ },\n    ],\n  }\n}\n"],"names":["IDENTIFIER","STRING","NUMBER","hljs","regex","either","RegExp"],"sourceRoot":""}