{"version":3,"file":"886.e99b4b5e.js","mappings":"+HASA,MAAMA,EAAa,yBAEJ,WAASC,GACtB,MAAO,CACL,KAAQ,OACR,QAAW,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,QACzD,kBAAoB,EAEpB,SAAY,CACV,QAAW,GACX,QAAW,CAAC,OAAQ,WAAY,QAAS,YAAa,QACtD,KAAQ,CAEN,OAAQ,OAAQ,OAAQ,QAAS,SAAU,OAAQ,OAEnD,QAAS,SAAU,SAAU,SAAU,SAAU,SACjD,OAAQ,QAAS,QAAS,QAC1B,UAAW,WAEb,SAAY,IAGd,SAAY,CAEV,CACE,MAAS,UACT,SAAY,CACVA,EAAKC,qBACLD,EAAKE,sBAKT,CACE,MAAS,SACT,MAASF,EAAKG,MAAMC,OAClB,eACA,YACA,KACA,MACA,OAGJ,CACE,MAAS,CACP,IACA,MACAL,EACA,SAEF,MAAS,CACP,EAAG,WACH,EAAG,SAKP,CAAE,MAAS,WAAY,MAASA,GAGhC,CACE,MAAS,WACT,MAASC,EAAKG,MAAMC,OAClB,KAAM,IAAK,KAAM,KACjB,KAAM,KAAM,IACZ,KAAM,IAAK,KAAM,KACjB,KAAM,KAAM,IAAK,MAKrB,CAAE,MAAS,SAAU,MAAS,UAG9B,CAAE,MAAS,cAAe,MAAS,qBAGzC,C","sources":["webpack://tonscan/./node_modules/highlightjs-func/src/languages/tlb.js"],"sourcesContent":["/*\nLanguage: TL-B\nAuthor: Nikita Sobolev <mail@sobolevn.me>\nDescription: TL-B serves to describe the type system, constructors,\n             and existing functions.\nWebsite: https://ton.org/docs/#/overviews/TL-B\nCategory: smartcontracts\n*/\n\nconst IDENTIFIER = /[a-zA-Z_][0-9a-zA-Z_]*/\n\nexport default function(hljs) {\n  return {\n    'name': 'TL-B',\n    'aliases': ['Tlb', 'tlb', 'TLB', 'tl-b', 'TL-b', 'Tl-B', 'Tl-b'],\n    'case_insensitive': false,\n\n    'keywords': {\n      'keyword': [],\n      'literal': ['True', 'BoolTrue', 'False', 'BoolFalse', 'Null'],\n      'type': [\n        // These are special cased, because they are used way too often:\n        'Type', 'Bool', 'Unit', 'Maybe', 'Either', 'Both', 'Cell',\n        // Not mentioned, but also widely used:\n        'uint8', 'uint15', 'uint16', 'uint32', 'uint63', 'uint64',\n        'int8', 'int16', 'int32', 'int64',\n        'bits256', 'bits512',\n      ],\n      'built_in': [],\n    },\n\n    'contains': [\n      // Comments\n      {\n        'scope': 'comment',\n        'variants': [\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.C_LINE_COMMENT_MODE,\n        ],\n      },\n\n      // Type definitions and tags\n      {\n        'scope': 'symbol',\n        'match': hljs.regex.either(\n          /#[0-9a-f]*_?/,\n          /\\$[01]*_?/,\n          /##/,\n          /#<=/,\n          /#</,\n        ),\n      },\n      {\n        'match': [\n          /=/,\n          /\\s+/,\n          IDENTIFIER,\n          /[\\s;]/,\n        ],\n        'scope': {\n          1: 'operator',\n          3: 'type',\n        },\n      },\n\n      // Variables\n      { 'scope': 'variable', 'match': IDENTIFIER },\n\n      // Operators\n      {\n        'scope': 'operator',\n        'match': hljs.regex.either(\n          /\\+/, /-/, /\\*/, /\\//,\n          /!=/, /==/, /=/,\n          /\\?/, /~/, /\\./, /\\^/,\n          /<=/, />=/, /</, />/,\n        ),\n      },\n\n      // Primitives\n      { 'scope': 'number', 'match': /[0-9]+/ },\n\n      // Punctuation\n      { 'scope': 'punctuation', 'match': /[;\\(\\):\\[\\]\\{\\}]/ },\n    ],\n  }\n}\n"],"names":["IDENTIFIER","hljs","C_BLOCK_COMMENT_MODE","C_LINE_COMMENT_MODE","regex","either"],"sourceRoot":""}