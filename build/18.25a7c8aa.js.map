{"version":3,"file":"18.25a7c8aa.js","mappings":"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","sources":["webpack://tonscan/./node_modules/highlightjs-func/src/languages/fift.js"],"sourcesContent":["/*\nLanguage: Fift\nAuthor: Nikita Sobolev <mail@sobolevn.me>\nDescription: Fift is a simple stack-based programming language designed for TON\nWebsite: https://ton.org/fiftbase.pdf\nCategory: smartcontracts\n*/\n\nconst IDENTIFIER = /[0-9A-Za-z$_-]+/\nconst WORD_DEFS = /(::_|::|:_|=:|:)/\n\nexport default function(hljs) {\n  return {\n    'name': 'Fift',\n    'aliases': ['fift'],\n    'case_insensitive': false,\n\n    'keywords': {\n      'keyword': [\n        // It is kinda hard to tell what is a keyword and what is an operator\n        // in fift. So, we do this instead:\n        // - If something contains letters / numbers / `-`,\n        //   we treat it as a keywrod\n        // - If something contains any other chars like `,`, `-`, `?`, `+`,\n        //   then we treat it as an operator\n        '-roll', '-rot|10', '-trailing', '-trailing0',\n\n        '2constant|10', '2drop|10', '2dup|10', '2over|10', '2swap|10',\n        'abort', 'abs', 'allot', 'and', 'anon', 'atom',\n\n        'bbitrefs', 'bbits', 'bl', 'box', 'brefs', 'brembitrefs', 'brembits',\n        'bremrefs', 'bye',\n\n        'cadr', 'caddr', 'car', 'cddr', 'cdr', 'char', 'chr', 'cmp',\n        'cond', 'cons', 'constant',\n        'count', 'cr', 'create',\n\n        'drop', 'depth',\n        'dictmap', 'dictmerge', 'dictnew',\n        'does', 'drop', 'dup',\n\n        'ed25519_chksign', 'ed25519_sign', 'ed25519_sign_uint',\n        'emit', 'exch', 'exch2|10', 'execute', 'explode',\n\n        'find', 'first', 'fits', 'forget',\n        'gasrunvm', 'gasrunvmcode', 'gasrunvmctx', 'gasrunvmdict',\n        'halt', 'hash', 'hashB', 'hashu', 'hold', 'hole',\n        'if', 'ifnot', 'include',\n\n        'list',\n        'minmax', 'max', 'min', 'mod',\n\n        'negate', 'newkeypair', 'nil', 'nip', 'nop', 'not', 'now', 'null',\n        'or', 'over',\n        'pair', 'pick',\n        'quit',\n\n        'remaining', 'reverse', 'roll', 'rot',\n        'runvm', 'runvmcode', 'runvmctx', 'runvmdict',\n\n        'sbitrefs', 'sbits', 'second', 'sgn', 'sign', 'shash', 'space', 'swap',\n        'single', 'skipspc', 'srefs',\n\n        'ten', 'third', 'times', 'triple', 'tuck', 'tuple', 'type',\n        'ufits', 'uncons', 'unpair', 'unsingle', 'until', 'untriple', 'untuple',\n\n        'variable',\n        'while',\n        'word', 'words',\n        'xor',\n      ],\n      'literal': ['true', 'false'],\n      'type': [],\n      'built_in': [],\n    },\n\n    'contains': [\n      // Comments\n      {\n        'scope': 'comment',\n        'variants': [\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.C_LINE_COMMENT_MODE\n        ],\n        'relevance': 0,\n      },\n\n      // Words, variables, and constants\n      {\n        'match': [\n          /\\s/,\n          /2?constant/,\n          /\\s+/,\n          IDENTIFIER,\n        ],\n        'scope': {\n          2: 'keyword',\n          4: 'variable.constant',\n        },\n      },\n      {\n        'match': [\n          /\\s/,\n          /variable/,\n          /\\s+/,\n          IDENTIFIER,\n        ],\n        'scope': {\n          2: 'keyword',\n          4: 'variable',\n        },\n      },\n      {\n        'match': [\n          /}/,\n          /\\s+/,\n          WORD_DEFS,\n          /\\s+/,\n          IDENTIFIER,\n        ],\n        'scope': {\n          1: 'punctuation',\n          3: 'operator',\n          5: 'function',  // this is the closest we have for \"word\" in fift\n        },\n      },\n\n      // Operators\n      {\n        'scope': 'operator',\n        'match': hljs.regex.either(\n          // Full list can be found in\n          // Appendix A. List of Fift words\n          // Ordered the same way source code does this.\n          // Except: shorter words must follow\n          // longer ones with the same base part.\n          // Example: `#` comes after `#s`\n          /!/,\n\n          /#>/, /#s/, /\\$#/, /#/,\n\n          /\\$\\+/, /\\$,/, /\\$\\d/, /\\$=/, /\\$(?=\\()/,\n          /\\$>smca/, /\\$>s/,\n          /\\$@\\+/, /\\$@\\?\\+/, /\\$@\\?/, /\\$@/,\n          /\\$cmp/, /\\$len/, /\\$pos/, /\\$reverse/,\n\n          /%1<</,\n\n          /\\('\\)/, /\\(-trailing\\)/, /\\(\\.\\)/, /\\(atom\\)/, /\\(b\\.\\)/,\n          /\\(compile\\)/, /\\(create\\)/, /\\(def\\?\\)/, /\\(dump\\)/, /\\(execute\\)/,\n          /\\(forget\\)/, /\\(number\\)/, /\\(x\\.\\)/, /\\(\\{\\)/, /\\(\\}\\)/,\n\n          /\\*\\/cmod/, /\\*\\/c/, /\\*\\/mod/, /\\*\\/rmod/, /\\*\\/r/, /\\*\\//,\n          /\\*>>c/, /\\*>>r/, /\\*>>/, /\\*mod/, /\\*/,\n\n          /\\+!/, /\\+/, /,/, /-!/, /-/,\n          /-1<</, /\\._/, /\\.dump/, /\\.l/, /\\.sl/, /\\.s/, /\\.tc/,\n          /\\//, /\\/\\*/, /\\/cmod/, /\\/c/, /\\/mod/, /\\/rmod/, /\\/r/,\n          /0!/, /0<=/, /0<>/, /0</, /0=/, /0>=/, /0>/,\n          /1\\+!/, /1\\+/, /1-!/, /1-/, /1<</, /1<<1-/,\n          /2\\*/, /2\\+/, /2-/, /2\\//, /2=:/,\n\n          WORD_DEFS,\n\n          /<#/, /<<\\/c/, /<<\\/r/, /<=/, /<>/, /<b/, /<s/, /<<\\//,\n          /<</, /</, /=/,\n\n          />=/, />>c/, />>r/, />>/, />/,\n\n          /\\?dup/,\n\n          /@'/, /@/,\n\n          /B\\+/, /B,/, /B=/, /B>Li@\\+/, /B>Li@/, /B>Lu@\\+/, /B>Lu@/, /B>boc/,\n          /B>file/, /B>i@\\+/, /B>i@/, /B>u@\\+/, /B>u@/,\n          /B@\\?\\+/, /B@\\+/, /B@\\?/, /B@/,\n          /Bcmp/, /BhashB/, /Bhashu/, /Bhash/, /Blen/, /Bx\\./,\n          /B\\|/, /Li>B/, /Lu>B/,\n\n          /\\[\\]/, /\\[compile\\]/, /\\[/, /\\]/,\n\n          /atom\\?/,\n\n          /b\\+/, /b\\._/, /b\\./,\n          /b>idict!\\+/, /b>idict!/, /b>sdict!\\+/, /b>sdict!/,\n          /b>udict!\\+/, /b>udict!/,\n          /b>/, /boc+>B/, /boc>B/,\n\n          /csr\\./,\n          /def\\?/,\n          /empty\\?/, /eq\\?/,\n          /file-exists\\?/, /file>B/,\n\n          /i,/, /i>B/, /i@\\+/, /i@/, /i@\\?\\+/, /i@\\?/,\n          /idict!\\+/, /idict!/, /idict-/, /idict@-/, /idict@/,\n\n          /null!/, /null\\?/,\n          /pfxdict!\\+/, /pfxdict!/, /pfxdict@/, /priv>pub/,\n          /ref@\\+/, /ref@/, /ref@\\?\\+/, /ref@\\?/,\n\n          /s,/, /s>c/, /s>/,\n          /sdict!\\+/, /sdict!/, /sdict-/, /sdict@-/, /sdict@/,\n          /smca>\\$/, /sr,/,\n\n          /tuple\\?/,\n\n          /u,/, /u>B/, /u@\\+/, /u@\\?\\+/, /u@\\?/,\n          /udict!\\+/, /udict!/, /udict-/, /udict@-/, /udict@/,\n          /undef\\?/,\n\n          /x\\._/, /x\\./,\n\n          /\\|\\+/, /\\|/, /\\|_/,\n\n          // Should be the last:\n          /(?<=\\s)\\.(?=\\s)/,\n        ),\n      },\n\n      // Primitives\n      {\n        'scope': 'number',\n        'match': hljs.regex.either(\n          /(0[xX][0-9a-fA-F]+)/,\n          /(0[bB][01]+)/,\n          /(-?[0-9]+(\\/-?[0-9]+)?)/,\n        ),\n      },\n      { 'scope': 'string', 'match': /\"([^\"\\r\\n\\\\]|\\\\.)*\"/ },\n      {\n        // slice hex literal\n        'scope': 'symbol',\n        'match': /[xX]\\{[0-9a-fA-F_]*}/,\n        'relevance': 10,\n      },\n      {\n        // byte hex literal\n        'scope': 'symbol',\n        'match': /[bB]\\{[01]*}/,\n        'relevance': 10,\n      },\n      {\n        // atom\n        'scope': 'symbol',\n        'match': /'[^\\s]+/,\n      },\n\n      // Punctuation\n      { 'scope': 'punctuation', 'match': /[\\[\\{\\}\\],]/ },\n    ],\n  }\n}\n"],"names":["IDENTIFIER","WORD_DEFS","hljs","C_BLOCK_COMMENT_MODE","C_LINE_COMMENT_MODE","regex","either"],"sourceRoot":""}